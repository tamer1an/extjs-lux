Ext.data.JsonP.Date({"tagname":"class","html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Date.html#Date' target='_blank'>Date.js</a></div></pre><div class='doc-contents'><p>Creates <code>Date</code> instances which let you work with dates and times.</p>\n\n<p>If you supply no arguments, the constructor creates a <code>Date</code> object for today's\ndate and time according to local time. If you supply some arguments but not\nothers, the missing arguments are set to 0. If you supply any arguments, you\nmust supply at least the year, month, and day. You can omit the hours, minutes,\nseconds, and milliseconds.</p>\n\n<p>The date is measured in milliseconds since midnight 01 January, 1970 UTC. A day\nholds 86,400,000 milliseconds. The <code>Date</code> object range is -100,000,000 days to\n100,000,000 days relative to 01 January, 1970 UTC.</p>\n\n<p>The <code>Date</code> object provides uniform behavior across platforms.</p>\n\n<p>The <code>Date</code> object supports a number of UTC (universal) methods, as well as\nlocal time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the\ntime as set by the World Time Standard. The local time is the time known to the\ncomputer where JavaScript is executed.</p>\n\n<p>Invoking <code>Date</code> in a non-constructor context (i.e., without the <code>new</code> operator)\nwill return a string representing the current time.</p>\n\n<p>Note that <code>Date</code> objects can only be instantiated by calling <code>Date</code> or using it\nas a constructor; unlike other JavaScript object types, <code>Date</code> objects have no\nliteral syntax.</p>\n\n<h1>Several ways to assign dates</h1>\n\n<p>The following example shows several ways to assign dates:</p>\n\n<pre><code>today = new Date();\nbirthday = new Date(\"December 19, 1989 03:24:00\");\nbirthday = new Date(1989,11,19);\nbirthday = new Date(1989,11,17,3,24,0);\n</code></pre>\n\n<h1>Calculating elapsed time</h1>\n\n<p>The following examples show how to determine the elapsed time between two dates:</p>\n\n<pre><code>// using static methods\nvar start = Date.now();\n// the event you'd like to time goes here:\ndoSomethingForALongTime();\nvar end = Date.now();\nvar elapsed = end - start; // time in milliseconds\n\n// if you have Date objects\nvar start = new Date();\n// the event you'd like to time goes here:\ndoSomethingForALongTime();\nvar end = new Date();\nvar elapsed = end.getTime() - start.getTime(); // time in milliseconds\n\n// if you want to test a function and get back its return\nfunction printElapsedTime (fTest) {\n    var nStartTime = Date.now(), vReturn = fTest(), nEndTime = Date.now();\n    alert(\"Elapsed time: \" + String(nEndTime - nStartTime) + \"\n    milliseconds\");\n    return vReturn;\n}\n\nyourFunctionReturn = printElapsedTime(yourFunction);\n</code></pre>\n\n<h1>ISO 8601 formatted dates</h1>\n\n<p>The following example shows how to formate a date in an ISO 8601 format using\nUTC:</p>\n\n<pre><code>// use a function for the exact format desired...\nfunction ISODateString(d){\nfunction pad(n){return n&lt;10 ? '0'+n : n}\nreturn d.getUTCFullYear()+'-'\n    + pad(d.getUTCMonth()+1)+'-'\n    + pad(d.getUTCDate())+'T'\n    + pad(d.getUTCHours())+':'\n    + pad(d.getUTCMinutes())+':'\n    + pad(d.getUTCSeconds())+'Z'}\n\nvar d = new Date();\nprint(ISODateString(d)); // prints something like 2009-09-28T19:03:12Z\n</code></pre>\n\n<div class=\"notice\">\nDocumentation for this class comes from <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">MDN</a>\nand is available under <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">Creative Commons: Attribution-Sharealike license</a>.\n</div>\n\n</div><div class='members'><div id='m-method'><h3 class='members-title'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance Methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-constructor' target='_blank' class='viewSource'>view source</a></div><strong class='constructor-signature'>new</strong><a href='#!/api/Date-method-constructor' class='name expandable'>Date</a>( <span class='pre'>[<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> year], [<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> month], [<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> day], [<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> hour], [<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> minute], [<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> second], [<a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> millisecond]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></div><div class='description'><div class='short'>Creates new Date object. ...</div><div class='long'><p>Creates new Date object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>year</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a>/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> (optional)<div class='sub-desc'><p>Either UNIX timestamp, date string, or year (when month and day parameters also provided):</p>\n\n<ul>\n<li><p>Integer value representing the number of milliseconds since 1 January 1970\n00:00:00 UTC (Unix Epoch).</p></li>\n<li><p>String value representing a date. The string should be in a format recognized\nby the parse method (IETF-compliant RFC 1123 timestamps).</p></li>\n<li><p>Integer value representing the year. For compatibility (in order to avoid the\nY2K problem), you should always specify the year in full; use 1998, rather\nthan 98.</p></li>\n</ul>\n\n</div></li><li><span class='pre'>month</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>Integer value representing the month, beginning with 0 for January to 11\nfor December.</p>\n</div></li><li><span class='pre'>day</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>Integer value representing the day of the month (1-31).</p>\n</div></li><li><span class='pre'>hour</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>Integer value representing the hour of the day (0-23).</p>\n</div></li><li><span class='pre'>minute</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>Integer value representing the minute segment (0-59) of a time reading.</p>\n</div></li><li><span class='pre'>second</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>Integer value representing the second segment (0-59) of a time reading.</p>\n</div></li><li><span class='pre'>millisecond</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a> (optional)<div class='sub-desc'><p>Integer value representing the millisecond segment (0-999) of a time reading.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-getDate' target='_blank' class='viewSource'>view source</a></div><a href='#!/api/Date-method-getDate' class='name expandable'>getDate</a>( <span class='pre'></span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></div><div class='description'><div class='short'>Returns the numeric value corresponding to the current time. ...</div><div class='long'><p>Returns the numeric value corresponding to the current time.</p>\n\n<p>The second statement below assigns the value 25 to the variable <code>day</code>, based on the value of the\n<code>Date</code> object <code>Xmas95</code>.</p>\n\n<pre><code>Xmas95 = new Date(\"December 25, 1995 23:15:00\")\nday = Xmas95.getDate()\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></span><div class='sub-desc'><p>Value between 1 and 31.</p>\n</div></li></ul></div></div></div><div id='method-getDay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-getDay' target='_blank' class='viewSource'>view source</a></div><a href='#!/api/Date-method-getDay' class='name expandable'>getDay</a>( <span class='pre'></span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></div><div class='description'><div class='short'>Returns the numeric value corresponding to the current time. ...</div><div class='long'><p>Returns the numeric value corresponding to the current time.</p>\n\n<p>The value returned by <code>getDay</code> is an integer corresponding to the day of the week: 0 for Sunday, 1\nfor Monday, 2 for Tuesday, and so on.</p>\n\n<p>The second statement below assigns the value 1 to <code>weekday</code>, based on the value of the <code>Date</code>\nobject <code>Xmas95</code>. December 25, 1995, is a Monday.</p>\n\n<pre><code>Xmas95 = new Date(\"December 25, 1995 23:15:00\");\nweekday = Xmas95.getDay();\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></span><div class='sub-desc'><p>A numeric representation of the day from Sunday (0) to\nSaturday (6).</p>\n</div></li></ul></div></div></div><div id='method-getFullYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-getFullYear' target='_blank' class='viewSource'>view source</a></div><a href='#!/api/Date-method-getFullYear' class='name expandable'>getFullYear</a>( <span class='pre'></span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></div><div class='description'><div class='short'>Returns the numeric value corresponding to the current time. ...</div><div class='long'><p>Returns the numeric value corresponding to the current time.</p>\n\n<p>The value returned by <code>getFullYear</code> is an absolute number. For dates between the years 1000 and\n9999, <code>getFullYear</code> returns a four-digit number, for example, 1995. Use this function to make sure\na year is compliant with years after 2000.</p>\n\n<p>Use this method instead of the <code>getYear</code> method.</p>\n\n<p>The following example assigns the four-digit value of the current year to the variable yr.</p>\n\n<pre><code>var today = new Date();\nvar yr = today.getFullYear();\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></span><div class='sub-desc'><p>Four digit representation of the year.</p>\n</div></li></ul></div></div></div><div id='method-getHours' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-getHours' target='_blank' class='viewSource'>view source</a></div><a href='#!/api/Date-method-getHours' class='name expandable'>getHours</a>( <span class='pre'></span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></div><div class='description'><div class='short'>Returns the numeric value corresponding to the current time. ...</div><div class='long'><p>Returns the numeric value corresponding to the current time.</p>\n\n<p>The second statement below assigns the value 23 to the variable <code>hours</code>, based on the value of the\n<code>Date</code> object <code>Xmas95</code>.</p>\n\n<pre><code>Xmas95 = new Date(\"December 25, 1995 23:15:00\")\nhours = Xmas95.getHours()\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></span><div class='sub-desc'><p>Value between 0 and 23, using 24-hour clock.</p>\n</div></li></ul></div></div></div><div id='method-getMilliseconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-getMilliseconds' target='_blank' class='viewSource'>view source</a></div><a href='#!/api/Date-method-getMilliseconds' class='name expandable'>getMilliseconds</a>( <span class='pre'></span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></div><div class='description'><div class='short'>Returns the numeric value corresponding to the current time. ...</div><div class='long'><p>Returns the numeric value corresponding to the current time.</p>\n\n<p>The following example assigns the milliseconds portion of the current time to the variable ms.</p>\n\n<pre><code>var ms;\nToday = new Date();\nms = Today.getMilliseconds();\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></span><div class='sub-desc'><p>A number between 0 and 999.</p>\n</div></li></ul></div></div></div><div id='method-getMinutes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-getMinutes' target='_blank' class='viewSource'>view source</a></div><a href='#!/api/Date-method-getMinutes' class='name expandable'>getMinutes</a>( <span class='pre'></span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></div><div class='description'><div class='short'>Returns the numeric value corresponding to the current time. ...</div><div class='long'><p>Returns the numeric value corresponding to the current time.</p>\n\n<p>The second statement below assigns the value 15 to the variable <code>minutes</code>, based on the value of\nthe <code>Date</code> object <code>Xmas95</code>.</p>\n\n<pre><code>Xmas95 = new Date(\"December 25, 1995 23:15:00\")\nminutes = Xmas95.getMinutes()\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></span><div class='sub-desc'><p>Value between 0 and 59.</p>\n</div></li></ul></div></div></div><div id='method-getMonth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Date' rel='Date' class='definedIn docClass'>Date</a><br/><a href='source/Date.html#Date-method-getMonth' target='_blank' class='viewSource'>view source</a></div><a href='#!/api/Date-method-getMonth' class='name expandable'>getMonth</a>( <span class='pre'></span> ) : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a></div><div class='description'><div class='short'>Returns the numeric value corresponding to the current time. ...</div><div class='long'><p>Returns the numeric value corresponding to the current time.</p>\n\n<p>The second statement below assigns the value 11 to the variable <code>month</code>, based on the value of the\n<code>Date</code> object <code>Xmas95</code>.</p>\n\n<pre><code>Xmas95 = new Date(\"December 25, 1995 23:15:00\")\nmonth = Xmas95.getMonth()\n</code></pre>\n<h3 class='pa'>