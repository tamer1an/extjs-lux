[
    {
        "className": "Ext.AbstractManager",
        "functions": [
            "create",
            "get",
            "isRegistered",
            "onAvailable",
            "register",
            "registerType",
            "unregister"
        ]
    },
    {
        "className": "Ext.Action",
        "configs": [
            "disabled",
            "handler",
            "hidden",
            "iconCls",
            "itemId",
            "scope",
            "text"
        ],
        "functions": [
            "disable",
            "each",
            "enable",
            "execute",
            "getIconClass",
            "getText",
            "hide",
            "isDisabled",
            "isHidden",
            "setDisabled",
            "setHandler",
            "setHidden",
            "setIconClass",
            "setText",
            "show"
        ]
    },
    {
        "className": "Ext.Ajax",
        "extend": "Ext.data.Connection",
        "singleton": "true",
        "functions": [
            "serializeForm"
        ]
    },
    {
        "className": "Ext.BoxComponent",
        "extend": "Ext.Component",
        "configs": [
            "anchor",
            "autoHeight",
            "autoScroll",
            "autoWidth",
            "boxMaxHeight",
            "boxMaxWidth",
            "boxMinHeight",
            "boxMinWidth",
            "flex",
            "height",
            "margins",
            "pageX",
            "pageY",
            "region",
            "tabTip",
            "width",
            "x",
            "y"
        ],
        "functions": [
            "getBox",
            "getHeight",
            "getOuterSize",
            "getPosition",
            "getResizeEl",
            "getSize",
            "getWidth",
            "setAutoScroll",
            "setHeight",
            "setPagePosition",
            "setPosition",
            "setSize",
            "setWidth",
            "syncSize",
            "updateBox"
        ]
    },
    {
        "className": "Ext.Button",
        "extend": "Ext.BoxComponent",
        "configs": [
            "allowDepress",
            "arrowAlign",
            "autoWidth",
            "buttonSelector",
            "clickEvent",
            "cls",
            "disabled",
            "enableToggle",
            "handleMouseEvents",
            "handler",
            "hidden",
            "icon",
            "iconAlign",
            "iconCls",
            "menu",
            "menuAlign",
            "minWidth",
            "overflowText",
            "pressed",
            "repeat",
            "scale",
            "scope",
            "tabIndex",
            "template",
            "text",
            "toggleGroup",
            "toggleHandler",
            "tooltip",
            "tooltipType",
            "type"
        ],
        "functions": [
            "getPressed",
            "getTemplateArgs",
            "getText",
            "hasVisibleMenu",
            "hideMenu",
            "setHandler",
            "setIcon",
            "setIconClass",
            "setText",
            "setTooltip",
            "showMenu",
            "toggle"
        ]
    },
    {
        "className": "Ext.ButtonGroup",
        "extend": "Ext.Panel",
        "configs": [
            "baseCls",
            "columns",
            "frame",
            "layout"
        ]
    },
    {
        "className": "Ext.chart.Axis"
    },
    {
        "className": "Ext.chart.BarChart",
        "extend": "Ext.chart.CartesianChart"
    },
    {
        "className": "Ext.chart.BarSeries",
        "extend": "Ext.chart.CartesianSeries"
    },
    {
        "className": "Ext.chart.CartesianChart",
        "extend": "Ext.chart.Chart"
    },
    {
        "className": "Ext.chart.CartesianSeries",
        "extend": "Ext.chart.Series"
    },
    {
        "className": "Ext.chart.CategoryAxis",
        "extend": "Ext.chart.Axis"
    },
    {
        "className": "Ext.chart.Chart",
        "extend": "Ext.FlashComponent",
        "configs": [
            "chartStyle",
            "disableCaching",
            "extraStyle",
            "seriesStyles",
            "url"
        ],
        "functions": [
            "bindStore",
            "setSeriesStyles",
            "setStyle",
            "setStyles"
        ]
    },
    {
        "className": "Ext.chart.ColumnChart",
        "extend": "Ext.chart.CartesianChart"
    },
    {
        "className": "Ext.chart.ColumnSeries",
        "extend": "Ext.chart.CartesianSeries"
    },
    {
        "className": "Ext.chart.LineChart",
        "extend": "Ext.chart.CartesianChart"
    },
    {
        "className": "Ext.chart.LineSeries",
        "extend": "Ext.chart.CartesianSeries"
    },
    {
        "className": "Ext.chart.NumericAxis",
        "extend": "Ext.chart.Axis"
    },
    {
        "className": "Ext.chart.PieChart",
        "extend": "Ext.chart.Chart"
    },
    {
        "className": "Ext.chart.PieSeries",
        "extend": "Ext.chart.Series"
    },
    {
        "className": "Ext.chart.Series"
    },
    {
        "className": "Ext.chart.StackedBarChart",
        "extend": "Ext.chart.CartesianChart"
    },
    {
        "className": "Ext.chart.StackedColumnChart",
        "extend": "Ext.chart.CartesianChart"
    },
    {
        "className": "Ext.chart.TimeAxis",
        "extend": "Ext.chart.Axis"
    },
    {
        "className": "Ext.ColorPalette",
        "extend": "Ext.Component",
        "configs": [
            "allowReselect",
            "clickEvent",
            "handler",
            "itemCls",
            "scope",
            "tpl",
            "value"
        ],
        "functions": [
            "select"
        ]
    },
    {
        "className": "Ext.Component",
        "extend": "Ext.util.Observable",
        "configs": [
            "allowDomMove",
            "applyTo",
            "autoEl",
            "autoShow",
            "bubbleEvents",
            "clearCls",
            "cls",
            "contentEl",
            "ctCls",
            "data",
            "disabled",
            "disabledClass",
            "fieldLabel",
            "hidden",
            "hideLabel",
            "hideMode",
            "hideParent",
            "html",
            "id",
            "itemCls",
            "itemId",
            "labelSeparator",
            "labelStyle",
            "overCls",
            "plugins",
            "ptype",
            "ref",
            "renderTo",
            "stateEvents",
            "stateId",
            "stateful",
            "style",
            "tpl",
            "tplWriteMode",
            "xtype"
        ],
        "functions": [
            "addClass",
            "applyToMarkup",
            "bubble",
            "cloneConfig",
            "destroy",
            "disable",
            "enable",
            "findParentBy",
            "findParentByType",
            "focus",
            "getBubbleTarget",
            "getEl",
            "getId",
            "getItemId",
            "getXType",
            "getXTypes",
            "hide",
            "isVisible",
            "isXType",
            "mon",
            "mun",
            "nextSibling",
            "previousSibling",
            "removeClass",
            "render",
            "setDisabled",
            "setVisible",
            "show",
            "update"
        ]
    },
    {
        "className": "Ext.ComponentManager",
        "singleton": "true",
        "functions": [
            "create",
            "createPlugin",
            "get",
            "isPluginRegistered",
            "isRegistered",
            "onAvailable",
            "register",
            "registerPlugin",
            "registerType",
            "unregister"
        ]
    },
    {
        "className": "Ext.CompositeElement",
        "extend": "Ext.CompositeElementLite",
        "functions": [
            null
        ]
    },
    {
        "className": "Ext.CompositeElementLite",
        "functions": [
            "add",
            "clear",
            "contains",
            "each",
            "fill",
            "filter",
            "first",
            "getCount",
            "indexOf",
            "item",
            "last",
            "removeElement",
            "replaceElement"
        ]
    },
    {
        "className": "Ext.Container",
        "extend": "Ext.BoxComponent",
        "configs": [
            "activeItem",
            "autoDestroy",
            "bubbleEvents",
            "bufferResize",
            "defaultType",
            "defaults",
            "forceLayout",
            "hideBorders",
            "items",
            "layout",
            "layoutConfig",
            "monitorResize",
            "resizeEvent"
        ],
        "functions": [
            "add",
            "cascade",
            "doLayout",
            "find",
            "findBy",
            "findById",
            "findByType",
            "get",
            "getComponent",
            "getLayout",
            "getLayoutTarget",
            "insert",
            "remove",
            "removeAll"
        ]
    },
    {
        "className": "Ext.CycleButton",
        "extend": "Ext.SplitButton",
        "configs": [
            "changeHandler",
            "forceIcon",
            "items",
            "prependText",
            "showText"
        ],
        "functions": [
            "getActiveItem",
            "setActiveItem",
            "toggleSelected"
        ]
    },
    {
        "className": "Ext.data.Api",
        "singleton": "true",
        "functions": [
            "Response",
            "getVerb",
            "hasUniqueUrl",
            "isAction",
            "isValid",
            "prepare",
            "restify"
        ]
    },
    {
        "className": "Ext.data.Api.Error",
        "extend": "Ext.Error"
    },
    {
        "className": "Ext.data.reader.Array",
        "extend": "Ext.data.reader.Json",
        "configs": [
            "id",
            "idIndex"
        ],
        "functions": [
            "readRecords"
        ]
    },
    {
        "className": "Ext.data.ArrayStore",
        "extend": "Ext.data.Store"
    },
    {
        "className": "Ext.data.Connection",
        "extend": "Ext.util.Observable",
        "configs": [
            "autoAbort",
            "defaultHeaders",
            "disableCaching",
            "disableCachingParam",
            "extraParams",
            "method",
            "timeout",
            "url"
        ],
        "functions": [
            "abort",
            "isLoading",
            "request"
        ]
    },
    {
        "className": "Ext.data.DataProxy",
        "extend": "Ext.util.Observable",
        "configs": [
            "api",
            "doRequest",
            "onRead",
            "onWrite",
            "restful"
        ],
        "functions": [
            "destroy",
            "isApiAction",
            "load",
            "request",
            "setApi"
        ]
    },
    {
        "className": "Ext.data.DataProxy.Error",
        "extend": "Ext.Error"
    },
    {
        "className": "Ext.data.DataReader",
        "configs": [
            "fields",
            "messageProperty"
        ],
        "functions": [
            "isData",
            "realize",
            "update"
        ]
    },
    {
        "className": "Ext.data.DataReader.Error",
        "extend": "Ext.Error"
    },
    {
        "className": "Ext.data.DataWriter",
        "configs": [
            "createRecord",
            "destroyRecord",
            "listful",
            "updateRecord",
            "writeAllFields"
        ],
        "functions": [
            "apply",
            "render",
            "toArray",
            "toHash"
        ]
    },
    {
        "className": "Ext.data.proxy.Direct",
        "extend": "Ext.data.DataProxy",
        "configs": [
            "directFn",
            "paramOrder",
            "paramsAsHash"
        ],
        "functions": [
            "doRequest",
            "onRead",
            "onWrite"
        ]
    },
    {
        "className": "Ext.data.DirectStore",
        "extend": "Ext.data.Store"
    },
    {
        "className": "Ext.data.Field",
        "configs": [
            "allowBlank",
            "convert",
            "dateFormat",
            "defaultValue",
            "mapping",
            "name",
            "sortDir",
            "sortType",
            "type",
            "useNull"
        ]
    },
    {
        "className": "Ext.data.GroupingStore",
        "extend": "Ext.data.Store",
        "configs": [
            "groupDir",
            "groupField",
            "groupOnSort",
            "remoteGroup"
        ],
        "functions": [
            "clearGrouping",
            "groupBy"
        ]
    },
    {
        "className": "Ext.data.HttpProxy",
        "extend": "Ext.data.DataProxy",
        "functions": [
            "doRequest",
            "getConnection",
            "onRead",
            "onWrite",
            "setUrl"
        ]
    },
    {
        "className": "Ext.data.reader.Json",
        "extend": "Ext.data.DataReader",
        "configs": [
            "idProperty",
            "root",
            "successProperty",
            "totalProperty"
        ],
        "functions": [
            "read",
            "readRecords",
            "readResponse"
        ]
    },
    {
        "className": "Ext.data.reader.Json.Error"
    },
    {
        "className": "Ext.data.JsonStore",
        "extend": "Ext.data.Store"
    },
    {
        "className": "Ext.data.writer.Json",
        "extend": "Ext.data.DataWriter",
        "configs": [
            "encode",
            "encodeDelete"
        ],
        "functions": [
            "createRecord",
            "destroyRecord",
            "render",
            "updateRecord"
        ]
    },
    {
        "className": "Ext.data.proxy.Memory",
        "extend": "Ext.data.DataProxy",
        "functions": [
            "doRequest"
        ]
    },
    {
        "className": "Ext.data.Node",
        "extend": "Ext.util.Observable",
        "configs": [
            "id",
            "leaf"
        ],
        "functions": [
            "appendChild",
            "bubble",
            "cascade",
            "contains",
            "destroy",
            "eachChild",
            "findChild",
            "findChildBy",
            "getDepth",
            "getOwnerTree",
            "getPath",
            "hasChildNodes",
            "indexOf",
            "insertBefore",
            "isAncestor",
            "isExpandable",
            "isFirst",
            "isLast",
            "isLeaf",
            "item",
            "remove",
            "removeAll",
            "removeChild",
            "replaceChild",
            "setId",
            "sort"
        ]
    },
    {
        "className": "Ext.data.Record",
        "functions": [
            "Record.id",
            "beginEdit",
            "cancelEdit",
            "commit",
            "copy",
            "create",
            "endEdit",
            "get",
            "getChanges",
            "isModified",
            "isValid",
            "markDirty",
            "reject",
            "set"
        ]
    },
    {
        "className": "Ext.data.Request",
        "configs": [
            "action",
            "callback",
            "params",
            "reader",
            "rs",
            "scope"
        ]
    },
    {
        "className": "Ext.data.Response",
        "configs": [
            "action",
            "data",
            "message",
            "raw",
            "records",
            "success"
        ]
    },
    {
        "className": "Ext.data.proxy.ScriptTag",
        "extend": "Ext.data.DataProxy",
        "configs": [
            "callbackParam",
            "nocache",
            "timeout",
            "url"
        ],
        "functions": [
            "abort",
            "doRequest",
            "onRead",
            "onWrite"
        ]
    },
    {
        "className": "Ext.data.SortTypes",
        "singleton": "true",
        "functions": [
            "asDate",
            "asFloat",
            "asInt",
            "asText",
            "asUCString",
            "asUCText",
            "none"
        ]
    },
    {
        "className": "Ext.data.Store",
        "extend": "Ext.util.Observable",
        "configs": [
            "autoDestroy",
            "autoLoad",
            "autoSave",
            "baseParams",
            "batch",
            "data",
            "defaultParamNames",
            "paramNames",
            "proxy",
            "pruneModifiedRecords",
            "reader",
            "remoteSort",
            "restful",
            "sortInfo",
            "storeId",
            "url",
            "writer"
        ],
        "functions": [
            "add",
            "addSorted",
            "clearFilter",
            "collect",
            "commitChanges",
            "destroy",
            "each",
            "filter",
            "filterBy",
            "find",
            "findBy",
            "findExact",
            "getAt",
            "getById",
            "getCount",
            "getModifiedRecords",
            "getRange",
            "getSortState",
            "getTotalCount",
            "indexOf",
            "indexOfId",
            "insert",
            "isFiltered",
            "load",
            "loadData",
            "multiSort",
            "query",
            "queryBy",
            "rejectChanges",
            "reload",
            "remove",
            "removeAll",
            "removeAt",
            "save",
            "setBaseParam",
            "setDefaultSort",
            "singleSort",
            "sort",
            "sum"
        ]
    },
    {
        "className": "Ext.data.Store.Error",
        "extend": "Ext.Error"
    },
    {
        "className": "Ext.data.Tree",
        "extend": "Ext.util.Observable",
        "configs": [
            "pathSeparator"
        ],
        "functions": [
            "getNodeById",
            "getRootNode",
            "setRootNode"
        ]
    },
    {
        "className": "Ext.data.Types",
        "singleton": "true"
    },
    {
        "className": "Ext.data.reader.Xml",
        "extend": "Ext.data.DataReader",
        "configs": [
            "idPath",
            "record",
            "record",
            "successProperty",
            "totalProperty"
        ],
        "functions": [
            "read",
            "readRecords",
            "readResponse"
        ]
    },
    {
        "className": "Ext.data.XmlStore",
        "extend": "Ext.data.Store"
    },
    {
        "className": "Ext.data.writer.Xml",
        "extend": "Ext.data.DataWriter",
        "configs": [
            "documentRoot",
            "forceDocumentRoot",
            "root",
            "tpl",
            "xmlEncoding",
            "xmlVersion"
        ],
        "functions": [
            "createRecord",
            "destroyRecord",
            "render",
            "updateRecord"
        ]
    },
    {
        "className": "Ext.view.View",
        "extend": "Ext.BoxComponent",
        "configs": [
            "blockRefresh",
            "deferEmptyText",
            "emptyText",
            "itemSelector",
            "loadingText",
            "multiSelect",
            "overClass",
            "selectedClass",
            "simpleSelect",
            "singleSelect",
            "store",
            "tpl",
            "trackOver"
        ],
        "functions": [
            "bindStore",
            "clearSelections",
            "collectData",
            "deselect",
            "findItemFromChild",
            "getNode",
            "getNodes",
            "getRecord",
            "getRecords",
            "getSelectedIndexes",
            "getSelectedNodes",
            "getSelectedRecords",
            "getSelectionCount",
            "getStore",
            "indexOf",
            "isSelected",
            "prepareData",
            "refresh",
            "refreshNode",
            "select",
            "selectRange",
            "setStore"
        ]
    },
    {
        "className": "Ext.DatePicker",
        "extend": "Ext.Component",
        "configs": [
            "cancelText",
            "dayNames",
            "disabledDates",
            "disabledDatesRE",
            "disabledDatesText",
            "disabledDays",
            "disabledDaysText",
            "format",
            "handler",
            "maxDate",
            "maxText",
            "minDate",
            "minText",
            "monthNames",
            "monthYearText",
            "nextText",
            "okText",
            "prevText",
            "scope",
            "showToday",
            "startDay",
            "todayText",
            "todayTip"
        ],
        "functions": [
            "getValue",
            "setDisabledDates",
            "setDisabledDays",
            "setMaxDate",
            "setMinDate",
            "setValue"
        ]
    },
    {
        "className": "Ext.dd.DD",
        "extend": "Ext.dd.DragDrop",
        "functions": [
            "alignElWithMouse",
            "applyConfig",
            "autoOffset",
            "b4Drag",
            "b4MouseDown",
            "cachePosition",
            "setDelta",
            "setDragElPos"
        ]
    },
    {
        "className": "Ext.dd.DDProxy",
        "extend": "Ext.dd.DD",
        "functions": [
            "createFrame",
            "initFrame"
        ]
    },
    {
        "className": "Ext.dd.DDTarget",
        "extend": "Ext.dd.DragDrop"
    },
    {
        "className": "Ext.dd.DragDrop",
        "functions": [
            "addInvalidHandleClass",
            "addInvalidHandleId",
            "addInvalidHandleType",
            "addToGroup",
            "applyConfig",
            "clearConstraints",
            "clearTicks",
            "constrainTo",
            "endDrag",
            "getDragEl",
            "getEl",
            "init",
            "initTarget",
            "isLocked",
            "isValidHandleChild",
            "lock",
            "onAvailable",
            "onDrag",
            "onDragDrop",
            "onDragEnter",
            "onDragOut",
            "onDragOver",
            "onInvalidDrop",
            "onMouseDown",
            "onMouseUp",
            "removeFromGroup",
            "removeInvalidHandleClass",
            "removeInvalidHandleId",
            "removeInvalidHandleType",
            "resetConstraints",
            "setDragElId",
            "setHandleElId",
            "setInitPosition",
            "setOuterHandleElId",
            "setPadding",
            "setXConstraint",
            "setYConstraint",
            "startDrag",
            "toString",
            "unlock",
            "unreg"
        ]
    },
    {
        "className": "Ext.dd.DragDropManager",
        "singleton": "true",
        "functions": [
            "getBestMatch",
            "getCss",
            "getDDById",
            "getElement",
            "getLocation",
            "getRelated",
            "isDragDrop",
            "isHandle",
            "isLegalTarget",
            "isLocked",
            "isTypeOfDD",
            "lock",
            "refreshCache",
            "regDragDrop",
            "regHandle",
            "startDrag",
            "stopEvent",
            "unlock",
            "verifyEl"
        ]
    },
    {
        "className": "Ext.dd.DragSource",
        "extend": "Ext.dd.DDProxy",
        "configs": [
            "ddGroup",
            "dropAllowed",
            "dropNotAllowed"
        ],
        "functions": [
            "afterDragDrop",
            "afterDragEnter",
            "afterDragOut",
            "afterDragOver",
            "afterInvalidDrop",
            "beforeDragDrop",
            "beforeDragEnter",
            "beforeDragOut",
            "beforeDragOver",
            "beforeInvalidDrop",
            "getDragData",
            "getProxy",
            "hideProxy",
            "onBeforeDrag",
            "onStartDrag"
        ]
    },
    {
        "className": "Ext.dd.DragTracker",
        "extend": "Ext.util.Observable",
        "configs": [
            "active",
            "autoStart",
            "tolerance"
        ],
        "functions": [
            "getDragTarget",
            "onBeforeStart",
            "onDrag",
            "onEnd",
            "onStart"
        ]
    },
    {
        "className": "Ext.dd.DragZone",
        "extend": "Ext.dd.DragSource",
        "configs": [
            "containerScroll",
            "hlColor"
        ],
        "functions": [
            "afterRepair",
            "getDragData",
            "getRepairXY",
            "onInitDrag"
        ]
    },
    {
        "className": "Ext.dd.DropTarget",
        "extend": "Ext.dd.DDTarget",
        "configs": [
            "ddGroup",
            "dropAllowed",
            "dropNotAllowed",
            "overClass"
        ],
        "functions": [
            "notifyDrop",
            "notifyEnter",
            "notifyOut",
            "notifyOver"
        ]
    },
    {
        "className": "Ext.dd.DropZone",
        "extend": "Ext.dd.DropTarget",
        "functions": [
            "getTargetFromEvent",
            "notifyDrop",
            "notifyEnter",
            "notifyOut",
            "notifyOver",
            "onContainerDrop",
            "onContainerOver",
            "onNodeDrop",
            "onNodeEnter",
            "onNodeOut",
            "onNodeOver"
        ]
    },
    {
        "className": "Ext.dd.PanelProxy",
        "configs": [
            "insertProxy"
        ],
        "functions": [
            "getEl",
            "getGhost",
            "getProxy",
            "hide",
            "moveProxy",
            "show"
        ]
    },
    {
        "className": "Ext.dd.Registry",
        "singleton": "true",
        "functions": [
            "getHandle",
            "getHandleFromEvent",
            "getTarget",
            "getTargetFromEvent",
            "register",
            "unregister"
        ]
    },
    {
        "className": "Ext.dd.ScrollManager",
        "singleton": "true",
        "functions": [
            "refreshCache",
            "register",
            "unregister"
        ]
    },
    {
        "className": "Ext.dd.StatusProxy",
        "configs": [
            "dropAllowed",
            "dropNotAllowed"
        ],
        "functions": [
            "getEl",
            "getGhost",
            "hide",
            "repair",
            "reset",
            "setStatus",
            "show",
            "stop",
            "sync",
            "update"
        ]
    },
    {
        "className": "Ext.Direct",
        "extend": "Ext.util.Observable",
        "singleton": "true",
        "functions": [
            "addProvider",
            "getProvider"
        ]
    },
    {
        "className": "Ext.direct.JsonProvider",
        "extend": "Ext.direct.Provider"
    },
    {
        "className": "Ext.direct.PollingProvider",
        "extend": "Ext.direct.JsonProvider",
        "configs": [
            "baseParams",
            "interval",
            "priority",
            "url"
        ],
        "functions": [
            "connect",
            "disconnect"
        ]
    },
    {
        "className": "Ext.direct.Provider",
        "extend": "Ext.util.Observable",
        "configs": [
            "id",
            "priority",
            "type"
        ],
        "functions": [
            "isConnected"
        ]
    },
    {
        "className": "Ext.direct.RemotingProvider",
        "extend": "Ext.direct.JsonProvider",
        "configs": [
            "actions",
            "enableBuffer",
            "enableUrlEncode",
            "maxRetries",
            "namespace",
            "timeout",
            "url"
        ]
    },
    {
        "className": "Ext.Direct.Transaction"
    },
    {
        "className": "Ext.DomHelper",
        "singleton": "true",
        "functions": [
            "append",
            "applyStyles",
            "createDom",
            "createTemplate",
            "insertAfter",
            "insertBefore",
            "insertFirst",
            "insertHtml",
            "markup",
            "overwrite"
        ]
    },
    {
        "className": "Ext.DomQuery",
        "singleton": "true",
        "functions": [
            "compile",
            "filter",
            "is",
            "jsSelect",
            "operators",
            "selectNode",
            "selectNumber",
            "selectValue"
        ]
    },
    {
        "className": "Ext.Editor",
        "extend": "Ext.Component",
        "configs": [
            "alignment",
            "allowBlur",
            "autoSize",
            "cancelOnEsc",
            "completeOnEnter",
            "constrain",
            "field",
            "hideEl",
            "ignoreNoChange",
            "offsets",
            "revertInvalid",
            "shadow",
            "swallowKeys",
            "updateEl",
            "value"
        ],
        "functions": [
            "cancelEdit",
            "completeEdit",
            "getValue",
            "realign",
            "setSize",
            "setValue",
            "startEdit"
        ]
    },
    {
        "className": "Ext.Element",
        "functions": [
            "addClass",
            "addClassOnClick",
            "addClassOnFocus",
            "addClassOnOver",
            "addKeyListener",
            "addKeyMap",
            "addListener",
            "alignTo",
            "anchorTo",
            "animate",
            "appendChild",
            "appendTo",
            "applyStyles",
            "blur",
            "boxWrap",
            "center",
            "child",
            "clean",
            "clearOpacity",
            "clearPositioning",
            "clip",
            "contains",
            "createChild",
            "createProxy",
            "createShim",
            "down",
            "enableDisplayMode",
            "findParent",
            "findParentNode",
            "first",
            "fly",
            "focus",
            "get",
            "getAlignToXY",
            "getAnchorXY",
            "getAttribute",
            "getAttributeNS",
            "getBorderWidth",
            "getBottom",
            "getBox",
            "getCenterXY",
            "getColor",
            "getComputedHeight",
            "getComputedWidth",
            "getFrameWidth",
            "getHeight",
            "getLeft",
            "getMargins",
            "getOffsetsTo",
            "getPadding",
            "getPositioning",
            "getRegion",
            "getRight",
            "getScroll",
            "getSize",
            "getStyle",
            "getStyleSize",
            "getStyles",
            "getTextWidth",
            "getTop",
            "getUpdater",
            "getValue",
            "getViewSize",
            "getWidth",
            "getX",
            "getXY",
            "getY",
            "handleError",
            "hasClass",
            "hide",
            "hover",
            "initDD",
            "initDDProxy",
            "initDDTarget",
            "insertAfter",
            "insertBefore",
            "insertFirst",
            "insertHtml",
            "insertSibling",
            "is",
            "isBorderBox",
            "isDisplayed",
            "isMasked",
            "isScrollable",
            "isVisible",
            "last",
            "load",
            "mask",
            "move",
            "moveTo",
            "next",
            "on",
            "parent",
            "position",
            "prev",
            "purgeAllListeners",
            "query",
            "radioClass",
            "relayEvent",
            "remove",
            "removeAllListeners",
            "removeAnchor",
            "removeClass",
            "removeListener",
            "repaint",
            "replace",
            "replaceClass",
            "replaceWith",
            "scroll",
            "scrollIntoView",
            "scrollTo",
            "select",
            "set",
            "setBottom",
            "setBounds",
            "setBox",
            "setDisplayed",
            "setHeight",
            "setLeft",
            "setLeftTop",
            "setLocation",
            "setOpacity",
            "setPositioning",
            "setRegion",
            "setRight",
            "setSize",
            "setStyle",
            "setTop",
            "setVisibilityMode",
            "setVisible",
            "setWidth",
            "setX",
            "setXY",
            "setY",
            "show",
            "swallowEvent",
            "toggle",
            "toggleClass",
            "translatePoints",
            "un",
            "unclip",
            "unmask",
            "unselectable",
            "up",
            "update",
            "wrap"
        ]
    },
    {
        "className": "Ext.Error",
        "extend": "Error",
        "functions": [
            "getMessage",
            "getName",
            "toJson"
        ]
    },
    {
        "className": "Ext.EventManager",
        "singleton": "true",
        "functions": [
            "addListener",
            "function",
            "hasModifier",
            "on",
            "onDocumentReady",
            "onTextResize",
            "onWindowResize",
            "removeAll",
            "removeListener",
            "removeResizeListener",
            "un"
        ]
    },
    {
        "className": "Ext.EventObject",
        "singleton": "true",
        "functions": [
            "getCharCode",
            "getKey",
            "getPageX",
            "getPageY",
            "getRelatedTarget",
            "getTarget",
            "getWheelDelta",
            "getXY",
            "preventDefault",
            "stopEvent",
            "stopPropagation",
            "within"
        ]
    },
    {
        "className": "Ext.FlashComponent",
        "extend": "Ext.BoxComponent",
        "configs": [
            "backgroundColor",
            "expressInstall",
            "flashParams",
            "flashVars",
            "flashVersion",
            "url",
            "wmode"
        ]
    },
    {
        "className": "Ext.FlashProxy",
        "singleton": "true"
    },
    {
        "className": "Ext.form.Action",
        "configs": [
            "failure",
            "method",
            "params",
            "reset",
            "scope",
            "submitEmptyText",
            "success",
            "timeout",
            "url",
            "waitMsg",
            "waitTitle"
        ]
    },
    {
        "className": "Ext.form.Action.DirectLoad",
        "extend": "Ext.form.Action.Load"
    },
    {
        "className": "Ext.form.Action.DirectSubmit",
        "extend": "Ext.form.Action.Submit"
    },
    {
        "className": "Ext.form.Action.Load",
        "extend": "Ext.form.Action"
    },
    {
        "className": "Ext.form.Action.Submit",
        "extend": "Ext.form.Action",
        "configs": [
            "clientValidation",
            "errorReader"
        ]
    },
    {
        "className": "Ext.form.BasicForm",
        "extend": "Ext.util.Observable",
        "configs": [
            "api",
            "baseParams",
            "errorReader",
            "fileUpload",
            "method",
            "paramOrder",
            "paramsAsHash",
            "reader",
            "standardSubmit",
            "timeout",
            "trackResetOnLoad",
            "url",
            "waitTitle"
        ],
        "functions": [
            "add",
            "applyIfToFields",
            "applyToFields",
            "cleanDestroyed",
            "clearInvalid",
            "doAction",
            "findField",
            "getEl",
            "getFieldValues",
            "getValues",
            "isDirty",
            "isValid",
            "load",
            "loadRecord",
            "markInvalid",
            "remove",
            "render",
            "reset",
            "setValues",
            "submit",
            "updateRecord"
        ]
    },
    {
        "className": "Ext.form.Checkbox",
        "extend": "Ext.form.Field",
        "configs": [
            "autoCreate",
            "boxLabel",
            "checked",
            "fieldClass",
            "focusClass",
            "handler",
            "inputValue",
            "scope"
        ],
        "functions": [
            "getValue",
            "setValue"
        ]
    },
    {
        "className": "Ext.form.CheckboxGroup",
        "extend": "Ext.form.Field",
        "configs": [
            "allowBlank",
            "blankText",
            "columns",
            "items",
            "vertical"
        ],
        "functions": [
            "getErrors",
            "getValue",
            "setValue"
        ]
    },
    {
        "className": "Ext.form.ComboBox",
        "extend": "Ext.form.TriggerField",
        "configs": [
            "allQuery",
            "autoCreate",
            "autoSelect",
            "clearFilterOnReset",
            "displayField",
            "forceSelection",
            "handleHeight",
            "hiddenId",
            "hiddenName",
            "hiddenValue",
            "itemSelector",
            "lazyInit",
            "lazyRender",
            "listAlign",
            "listClass",
            "listEmptyText",
            "listWidth",
            "loadingText",
            "maxHeight",
            "minChars",
            "minHeight",
            "minListWidth",
            "mode",
            "pageSize",
            "queryDelay",
            "queryParam",
            "resizable",
            "selectOnFocus",
            "selectedClass",
            "shadow",
            "store",
            "submitValue",
            "title",
            "tpl",
            "transform",
            "triggerAction",
            "triggerClass",
            "typeAhead",
            "typeAheadDelay",
            "valueField",
            "valueNotFoundText"
        ],
        "functions": [
            "clearValue",
            "collapse",
            "doQuery",
            "expand",
            "getListParent",
            "getStore",
            "getValue",
            "isExpanded",
            "select",
            "selectByValue",
            "setValue"
        ]
    },
    {
        "className": "Ext.form.CompositeField",
        "extend": "Ext.form.Field",
        "configs": [
            "defaults",
            "labelConnector"
        ],
        "functions": [
            "buildCombinedErrorMessage",
            "buildLabel",
            "clearInvalidChildren",
            "isDirty",
            "onFieldClearInvalid",
            "onFieldMarkInvalid",
            "reset",
            "sortErrors",
            "validateValue"
        ]
    },
    {
        "className": "Ext.form.DateField",
        "extend": "Ext.form.TriggerField",
        "configs": [
            "altFormats",
            "autoCreate",
            "disabledDates",
            "disabledDatesText",
            "disabledDays",
            "disabledDaysText",
            "format",
            "invalidText",
            "maxText",
            "maxValue",
            "minText",
            "minValue",
            "showToday",
            "startDay",
            "triggerClass"
        ],
        "functions": [
            "getErrors",
            "getValue",
            "setDisabledDates",
            "setDisabledDays",
            "setMaxValue",
            "setMinValue",
            "setValue"
        ]
    },
    {
        "className": "Ext.form.DisplayField",
        "extend": "Ext.form.Field",
        "configs": [
            "fieldClass",
            "htmlEncode"
        ]
    },
    {
        "className": "Ext.form.Field",
        "extend": "Ext.BoxComponent",
        "configs": [
            "autoCreate",
            "cls",
            "disabled",
            "fieldClass",
            "focusClass",
            "inputType",
            "invalidClass",
            "invalidText",
            "msgFx",
            "msgTarget",
            "name",
            "preventMark",
            "readOnly",
            "submitValue",
            "tabIndex",
            "validateOnBlur",
            "validationDelay",
            "validationEvent",
            "value"
        ],
        "functions": [
            "clearInvalid",
            "getActiveError",
            "getErrors",
            "getName",
            "getRawValue",
            "getValue",
            "isDirty",
            "isValid",
            "markInvalid",
            "processValue",
            "reset",
            "setActiveError",
            "setRawValue",
            "setReadOnly",
            "setValue",
            "unsetActiveError",
            "validate",
            "validateValue"
        ]
    },
    {
        "className": "Ext.form.FieldSet",
        "extend": "Ext.Panel",
        "configs": [
            "animCollapse",
            "baseCls",
            "checkboxName",
            "checkboxToggle",
            "collapsible",
            "itemCls",
            "labelWidth",
            "layout"
        ],
        "functions": [
            "onCheckClick"
        ]
    },
    {
        "className": "Ext.form.Panel",
        "extend": "Ext.Panel",
        "configs": [
            "buttons",
            "formId",
            "hideLabels",
            "itemCls",
            "labelAlign",
            "labelPad",
            "labelSeparator",
            "labelWidth",
            "layout",
            "minButtonWidth",
            "monitorPoll",
            "monitorValid"
        ],
        "functions": [
            "getForm",
            "load",
            "startMonitoring",
            "stopMonitoring"
        ]
    },
    {
        "className": "Ext.form.Hidden",
        "extend": "Ext.form.Field"
    },
    {
        "className": "Ext.form.HtmlEditor",
        "extend": "Ext.form.Field",
        "configs": [
            "createLinkText",
            "defaultLinkValue",
            "defaultValue",
            "enableAlignments",
            "enableColors",
            "enableFont",
            "enableFontSize",
            "enableFormat",
            "enableLinks",
            "enableLists",
            "enableSourceEdit",
            "fontFamilies"
        ],
        "functions": [
            "cleanHtml",
            "execCmd",
            "getDocMarkup",
            "getToolbar",
            "insertAtCursor",
            "pushValue",
            "relayCmd",
            "syncValue",
            "toggleSourceEdit",
            "updateToolbar"
        ]
    },
    {
        "className": "Ext.form.Label",
        "extend": "Ext.BoxComponent",
        "configs": [
            "forId",
            "html",
            "text"
        ],
        "functions": [
            "setText"
        ]
    },
    {
        "className": "Ext.form.NumberField",
        "extend": "Ext.form.TextField",
        "configs": [
            "allowDecimals",
            "allowNegative",
            "autoStripChars",
            "baseChars",
            "decimalPrecision",
            "decimalSeparator",
            "fieldClass",
            "maxText",
            "maxValue",
            "minText",
            "minValue",
            "nanText"
        ],
        "functions": [
            "getErrors",
            "setMaxValue",
            "setMinValue"
        ]
    },
    {
        "className": "Ext.form.Radio",
        "extend": "Ext.form.Checkbox",
        "functions": [
            "getGroupValue",
            "setValue"
        ]
    },
    {
        "className": "Ext.form.RadioGroup",
        "extend": "Ext.form.CheckboxGroup",
        "configs": [
            "allowBlank",
            "blankText",
            "items"
        ],
        "functions": [
            "getValue",
            "onSetValue"
        ]
    },
    {
        "className": "Ext.form.SliderField",
        "extend": "Ext.form.Field",
        "configs": [
            "tipText",
            "useTips"
        ],
        "functions": [
            "getValue",
            "setMaxValue",
            "setMinValue",
            "setValue"
        ]
    },
    {
        "className": "Ext.form.TextArea",
        "extend": "Ext.form.TextField",
        "configs": [
            "autoCreate",
            "growMax",
            "growMin",
            "preventScrollbars"
        ],
        "functions": [
            "autoSize"
        ]
    },
    {
        "className": "Ext.form.TextField",
        "extend": "Ext.form.Field",
        "configs": [
            "allowBlank",
            "blankText",
            "disableKeyFilter",
            "emptyClass",
            "emptyText",
            "enableKeyEvents",
            "grow",
            "growMax",
            "growMin",
            "maskRe",
            "maxLength",
            "maxLengthText",
            "minLength",
            "minLengthText",
            "regex",
            "regexText",
            "selectOnFocus",
            "stripCharsRe",
            "validator",
            "vtype",
            "vtypeText"
        ],
        "functions": [
            "autoSize",
            "getErrors",
            "reset",
            "selectText"
        ]
    },
    {
        "className": "Ext.form.TimeField",
        "extend": "Ext.form.ComboBox",
        "configs": [
            "altFormats",
            "format",
            "increment",
            "invalidText",
            "maxText",
            "maxValue",
            "minText",
            "minValue"
        ],
        "functions": [
            "setMaxValue",
            "setMinValue"
        ]
    },
    {
        "className": "Ext.form.TriggerField",
        "extend": "Ext.form.TextField",
        "configs": [
            "autoCreate",
            "editable",
            "hideTrigger",
            "readOnly",
            "triggerClass",
            "triggerConfig",
            "wrapFocusClass"
        ],
        "functions": [
            "onTriggerClick",
            "setEditable",
            "setHideTrigger",
            "setReadOnly"
        ]
    },
    {
        "className": "Ext.form.TwinTriggerField",
        "extend": "Ext.form.TriggerField",
        "configs": [
            "trigger1Class",
            "trigger2Class",
            "triggerConfig"
        ],
        "functions": [
            "onTrigger1Click",
            "onTrigger2Click"
        ]
    },
    {
        "className": "Ext.form.VTypes",
        "singleton": "true",
        "functions": [
            "alpha",
            "alphanum",
            "email",
            "url"
        ]
    },
    {
        "className": "Ext.Fx",
        "configs": [
            "afterCls",
            "afterStyle",
            "block",
            "callback",
            "concurrent",
            "duration",
            "easing",
            "endOpacity",
            "remove",
            "scope",
            "stopFx",
            "useDisplay"
        ],
        "functions": [
            "fadeIn",
            "fadeOut",
            "frame",
            "ghost",
            "hasActiveFx",
            "hasFxBlock",
            "highlight",
            "pause",
            "puff",
            "scale",
            "sequenceFx",
            "shift",
            "slideIn",
            "slideOut",
            "stopFx",
            "switchOff",
            "syncFx"
        ]
    },
    {
        "className": "Ext.grid.AbstractSelectionModel",
        "extend": "Ext.util.Observable",
        "functions": [
            "isLocked",
            "lock",
            "unlock"
        ]
    },
    {
        "className": "Ext.grid.ActionColumn",
        "extend": "Ext.grid.Column",
        "configs": [
            "altText",
            "getClass",
            "handler",
            "icon",
            "iconCls",
            "items",
            "scope",
            "stopSelection",
            "tooltip"
        ]
    },
    {
        "className": "Ext.grid.BooleanColumn",
        "extend": "Ext.grid.Column",
        "configs": [
            "falseText",
            "trueText",
            "undefinedText"
        ]
    },
    {
        "className": "Ext.selection.CellModel",
        "extend": "Ext.grid.AbstractSelectionModel",
        "functions": [
            "clearSelections",
            "getSelectedCell",
            "hasSelection",
            "select"
        ]
    },
    {
        "className": "Ext.grid.CheckboxSelectionModel",
        "extend": "Ext.selection.RowModel",
        "configs": [
            "checkOnly",
            "header",
            "sortable",
            "width"
        ]
    },
    {
        "className": "Ext.grid.Column",
        "configs": [
            "align",
            "css",
          